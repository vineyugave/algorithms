#1.3.2
was best times of the was the it

#1.3.3
*Did not get the question*

#1.3.5
110010 - binary representation


#1.3.6
Reverses the queue q

#1.3.7
check com.vinzzz.libs.stdlib.Stack.java

#1.3.13
b,c & d

#1.3.14
See com.vinzzz.libs.stdlib.ResizingArrayQueue.java

#1.3.17
Look at Ex 1.3.16 solution, just do the same thing but build a queue of String for the transactions

#1.3.18
this will skip/delete the next node

#1.3.19
Node node = first;

while(node.next != null){
    node = node.next;
    //last but 1
    if(node.next.next == null)  node.next = null;
}

#1.3.20

public static LinkedList delete(int index, LinkedList list){
        Node node = list.getFirst();
        for (int i = 0; i < index; i++) {
            node = node.next;
        }
        Node oldNext = node.next;
        node.next = oldNext.next;
        oldNext = null;
    }

#1.3.21

public static boolean find(String key, LinkedList list){
      Node node = list.first();
      while(node.next != null){
           if(node.item.equals(key)){
                return true;
           }
      }

      return false;
}

#1.3.22
Inserts node t immediately after node x.

#1.3.23
T points to itself

#1.3.24
public Item removeAfter(Node node){
      if(node == null || node.next == null) return null

      Node next = node.next;
      node = next.next;
      Item item = next.item;
      next == null;
      return item;
}

#1.3.25
public void insertAfter(Node first, node second){
    if (first == null|| second == null)  return;

    second.next = first.next;
    first.next = second;
}

#1.3.26

public void remove(LinkedList list, String key) {
    if(list == null || key == null) return;

    Node node = list.first;
    Node old = null;

    while(node.next != null){
        if(node.item.equals(key)){
            // first item
            if(old== null) {
                list.first = node.next;
            }else{
                old.next = node.next;
            }
        }
        old = node;
        node = node.next;
    }
}

#1.3.27

public int max(Node first){

    if (first == null) throw new InvalidArgumentException();
    Node node = first;
    int max;

    while(first.next != null){
        if(first.item > max) max = first.item;

        node = node.next;
    }

    return max;
}

#1.3.28

public int recursiveMax(Node first, int maxValue){
    if(first.next == null) return maxValue;
    if(first.item > maxValue) maxValue = first.item;
    max(first.next, maxValue);
}

#1.3.30
Recursive solution
public Node reverse(Node first)
{
    if (first == null) return null;
    if (first.next == null) return first;
    Node second = first.next;
    Node rest = reverse(second);
    second.next = first;
    first.next = null;
    return rest;
}

#1.3.33
Look at java.util.Deque
Deque<String> deque = new LinkedList<>();

#1.3.35

// N is size of list
public int sample(){
    int ret = 0;
    if(N>1){
    ret = StdRandom.uniform(0, N-1)
    }

    return ret;
}

public T dequeue() {
    int randomIndex = sample();

    T temp = arr[randomIndex];
    arr[randomIndex] = arr[N-1];
    arr[N-1]= null;

    // resize if necessary
    return temp;
}

#1.3.36

Just shuffle array and then return the iterator

#1.3.38
See  com.vinzzz.libs.stdlib.Queue
insert is same as enqueue method

Item delete(int index) {
    int k = 0;
    Node current = last;
    Node prev = null;

    while(current.next != null){

        if(index == k) {
            if(prev != null){
                prev.next = current.next;
            }else{
                last = current.next;
            }
            return current.item;
        }

        prev = current;
        current = temp.next;
        k++;
    }

    return null
}

#1.3.39 Ring Buffer
Pseudo code :
a. Constructor with fixed size N array, init read, write counter
b  isFull()  method : iterate through the array to see if there is a null object present
c. isEmpty method : if N == 0
c. read() method : if empty throw underflowException else read from index read(also set it to null) and read++, N-- if read == N then read = 0
d. write() method : if full throw BufferOverflowException()  else write at index write and write++, N++ if write == N write = 0

#1.3.41
public Queue(Queue<Item> queue){
    last = null;
    first = null;
    N=0;
    for(Item item : queue){
        this.enqueue(item);
    }
}

#1.3.42

public Stack(Stack<Item> stack){
    first = null;
    n = 0;
    for(Item item : stack){
        this.push(item)
    }
}

#1.3.44

Maintain 2 stacks

item left of cursor will be in 1st stack
item right of cursor will be in 2nd stack.
DEL : if item in right stack then pop and return to user else return null
LEFT : pop from 1st stack and push to 2nd stack
RIGHT : pop from 2nd stack and push to 1st stack
SIZE : everytime insert is done increment count and decrement when DEL

#1.3.45 Stack Generability
for e.g :
4 6 8 7 5 3 2 9 0 1
1 was stacked on 0 so 1 should have popped before 0

0 4 6 5 3 8 1 7 2 9
7 was stacked on 1 so 1 should have popped before 1

1 4 7 9 8 6 5 3 0 2
2 was stacked on 0 as should have come out first

See Ex_1_3_45 for a non generalized solution. I tried .. but its not a complete solution yet.

#1.3.46 Forbidden Triple for Stack Generability
a. nested loop over the whole sequence 3 times :
for i 0..n
        get c
    for j i..n
            get cb
        for k j..n
                get cba
                and see if c>b>a
                if its not then its probably not a right sequence



#1.3.47
 a. Queues
  get a NewQueue
  Dequeue Q1 and Enqueue it into NewQueue
  Dequeue Q2 and Enqueue it into NewQueue

  b. Stacks
Implement Stack as a circular linked list
S1 & S2
Node S2First = S2.last.next;
S2.last.next = S1.last.next;
S1.last.next = S2First;

   c. Steque is same as Stack  above

#1.3.48
look at java.util.Deque or 1.3.33
use Deque add first stack from first and add second stack from last

#1.3.49
No clear solution check : https://stackoverflow.com/questions/5538192/how-to-implement-a-queue-with-three-stacks

#1.3.50
Pretty straight forward :
Maintain a counter that counts the number of push() and pop() operations.
When creating an iterator, store this value as an Iterator instance variable. Before
each call to hasNext() and next(), check that this value has not changed since construction
of the iterator; if it has, throw the exception.


